import sqlite3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

# –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
cursor.execute('SELECT * FROM users')

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
users = cursor.fetchall()

# –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
for user in users:
    print(user)

# –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn.close()

# # import telebot
# from telebot import types
# import sqlite3
# from datetime import datetime, timedelta
# import threading
# import time

# API_TOKEN = '8163214877:AAFKyMkngxJocJKDN1L7IQm8kZC0eV1Xey0'
# ADMIN_ID = '1321982385'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# CHANNEL_ID = '-1002445975865'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
# SUPPORT_LINK = 'https://t.me/tanya_everything_support'  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏

# bot = telebot.TeleBot(API_TOKEN)

# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
# cursor = conn.cursor()

# # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
# cursor.execute('''
# CREATE TABLE IF NOT EXISTS users (
#     user_id INTEGER PRIMARY KEY,
#     first_name TEXT,
#     last_name TEXT,
#     subscription_type TEXT,
#     subscription_start_date TEXT,
#     subscription_status TEXT
# )
# ''')
# conn.commit()

# # –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     markup = types.InlineKeyboardMarkup()
#     access_button = types.InlineKeyboardButton("üîì –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")
#     account_button = types.InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account")
#     support_button = types.InlineKeyboardButton("üõ† –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url=SUPPORT_LINK)
#     markup.add(access_button)
#     markup.add(account_button)
#     markup.add(support_button)

    

#     if str(message.chat.id) == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         send_button = types.KeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
#         send_unsub_button = types.KeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–º")
#         markup.add(send_button, send_unsub_button)
#         bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.", reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, """
#             üîë –ö–ª—é—á –∫ —Å—á–∞—Å—Ç—å—é üîë\n\n‚ú® –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ‚ú®\nüíº –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É ¬´Tanya Everything¬ª ü©∑\nüîì –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –±–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üå∏üí´\n\nüåü –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏\nüí≥ –õ–µ–≥–∫–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤!\nüì≤ –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∂–¥–µ—Ç —Ç–µ–±—è! üíñ\n\nüåà –ö–∞–Ω–∞–ª ¬´Tanya Everything¬ª ‚Äì —ç—Ç–æ —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é, —Å—á–∞—Å—Ç—å—é –∏ –≥–∞—Ä–º–æ–Ω–∏–∏! ‚ú®
#         """.strip(), reply_markup=markup)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
# @bot.callback_query_handler(func=lambda call: call.data == "get_access" or call.data == "account")
# def handle_main_menu(call):
#     if call.data == "get_access":
#         choose_subscription(call)

#     elif call.data == "account":
#         show_account(call.message)

# # –õ–æ–≥–∏–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø" (–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)
# def choose_subscription(call):
#     markup = types.InlineKeyboardMarkup()

#     # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#     one_month = types.InlineKeyboardButton("üóìÔ∏è 1 –º–µ—Å—è—Ü", callback_data="1 –º–µ—Å—è—Ü")
#     six_months = types.InlineKeyboardButton("üóìÔ∏è 6 –º–µ—Å—è—Ü–µ–≤", callback_data="6 –º–µ—Å—è—Ü–µ–≤")
#     twelve_months = types.InlineKeyboardButton("üóìÔ∏è 12 –º–µ—Å—è—Ü–µ–≤", callback_data="12 –º–µ—Å—è—Ü–µ–≤")

#     markup.add(one_month, six_months, twelve_months)
#     bot.send_message(call.message.chat.id, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ‚ú®\n\nüîπ <b>1 –º–µ—Å—è—Ü</b> ‚Äî 1000‚ÇΩ / 5100–¢–ì\n–ò–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å.\n\nüîπ <b>6 –º–µ—Å—è—Ü–µ–≤</b> ‚Äî 5000‚ÇΩ / 25500–¢–ì\n–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç! –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\nüîπ <b>12 –º–µ—Å—è—Ü–µ–≤</b> ‚Äî 10000‚ÇΩ / 51000–¢–ì\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞! –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞ —Ü–µ–ª—ã–π –≥–æ–¥ —Å —ç–∫–æ–Ω–æ–º–∏–µ–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.", reply_markup=markup, parse_mode="HTML")

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
# @bot.callback_query_handler(func=lambda call: call.data in ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "12 –º–µ—Å—è—Ü–µ–≤"])
# def handle_subscription_choice(call):
#     user_id = call.message.chat.id
#     chosen_subscription = call.data

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
#     cursor.execute('REPLACE INTO users (user_id, subscription_type, subscription_start_date, subscription_status) VALUES (?, ?, ?, ?)', 
#                    (user_id, chosen_subscription, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã'))
#     conn.commit()

#     # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#     question = bot.send_message(user_id, "üòä–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#     bot.register_next_step_handler(question, lambda message: ask_last_name(message, chosen_subscription, question.message_id))

#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#     bot.delete_message(call.message.chat.id, call.message.message_id)

# def ask_last_name(message, chosen_subscription, prev_message_id):
#     first_name = message.text
#     user_id = message.chat.id
#     question = bot.send_message(user_id, "üë§–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
#     bot.register_next_step_handler(question, lambda msg: save_user_data(msg, first_name, chosen_subscription, question.message_id))

#     # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å) –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     bot.delete_message(user_id, message.message_id)
#     bot.delete_message(user_id, prev_message_id)

# def save_user_data(message, first_name, subscription_type, prev_message_id):
#     last_name = message.text
#     user_id = message.chat.id

#     # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     cursor.execute('UPDATE users SET first_name = ?, last_name = ? WHERE user_id = ?', 
#                    (first_name, last_name, user_id))
#     conn.commit()

#     # –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
#     subscription_prices = {
#         "1 –º–µ—Å—è—Ü": "1000‚ÇΩ / 5100–¢–ì",
#         "6 –º–µ—Å—è—Ü–µ–≤": "5000‚ÇΩ / 25500–¢–ì",
#         "12 –º–µ—Å—è—Ü–µ–≤": "10000‚ÇΩ / 51000–¢–ì"
#     }

#     # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
#     price = subscription_prices.get(subscription_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–Ω—ã
#     bot.send_message(user_id, f"""
# üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription_type}.

# üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}

# üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ä—Ç:

# üá∑üá∫ –°–±–µ—Ä (–¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö): 5336 6902 2669 7219 (–ø–æ–ª—É—á–∞—Ç–µ–ª—å: –¢–∞—Ç—å—è–Ω–∞ –°)
# üá∞üáø Kaspi (–¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ–Ω–≥–µ): 4400 4302 9567 5877 (–ø–æ–ª—É—á–∞—Ç–µ–ª—å: –¢–∞—Ç—å—è–Ω–∞ –°)

# üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç.

# üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –∑–∞–π–º–µ—Ç –¥–æ 12 —á–∞—Å–æ–≤.
# üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!
# """)

#     # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å) –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     bot.delete_message(user_id, message.message_id)
#     bot.delete_message(user_id, prev_message_id)

# # –õ–æ–≥–∏–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
# def show_account(message):
#     user_id = message.chat.id
#     cursor.execute('SELECT subscription_type, subscription_start_date, subscription_status FROM users WHERE user_id = ?', (user_id,))
#     user_info = cursor.fetchone()

#     if user_info:
#         subscription_type, subscription_start_date, subscription_status = user_info
#         if subscription_status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ':
#             # –ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
#             start_date = datetime.strptime(subscription_start_date, '%Y-%m-%d %H:%M:%S')
#             days_passed = (datetime.now() - start_date).days

#             if "1 –º–µ—Å—è—Ü" in subscription_type:
#                 total_days = 30
#             elif "6 –º–µ—Å—è—Ü–µ–≤" in subscription_type:
#                 total_days = 180
#             elif "12 –º–µ—Å—è—Ü–µ–≤" in subscription_type:
#                 total_days = 365
#             else:
#                 total_days = 0

#             end_date = start_date + timedelta(days=total_days)

#             # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#             days_passed = (datetime.now() - start_date).days

#             # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
#             days_remaining = total_days - days_passed

#             # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
#             start_date_str = start_date.strftime('%d-%m-%Y')
#             end_date_str = end_date.strftime('%d-%m-%Y')

#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –Ω–∞—á–∞–ª–∞, –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
#             if days_remaining > 0:
#                 status_message = (f"‚è≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ {subscription_type}.\n"
#                                   f"üîñ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date_str}\n"
#                                   f"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}.")
#             else:
#                 status_message = (f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {subscription_type} –∏—Å—Ç–µ–∫–ª–∞.\n"
#                                   f"üîñ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date_str}\n"
#                                   f"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}.")

#             # –ö–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–ù–∞–∑–∞–¥"
#             markup = types.InlineKeyboardMarkup()
#             extend_button = types.InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
#             cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")
#             back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
#             markup.add(extend_button, cancel_button)
#             markup.add(back_button)

#             bot.send_message(user_id, status_message, reply_markup=markup)
#         else:
#             markup = types.InlineKeyboardMarkup()
#             back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
#             access_button = types.InlineKeyboardButton("üîì –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")


#             markup.add(back_button, access_button)

#             msg = bot.send_message(user_id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.üîë –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?", reply_markup=markup)
#     else:
#         # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
#         markup = types.InlineKeyboardMarkup()
#         access_button = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")
#         markup.add(access_button)
#         bot.send_message(user_id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.üîë –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?", reply_markup=markup)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–ù–∞–∑–∞–¥"
# @bot.callback_query_handler(func=lambda call: call.data == "extend_subscription" or call.data == "cancel_subscription" or call.data == "back_to_main")
# def handle_account_actions(call):
#     if call.data == "extend_subscription":
#         bot.delete_message(call.message.chat.id, call.message.message_id)
#         extend_subscription(call)
#     elif call.data == "cancel_subscription":
#         cancel_subscription(call)
#     elif call.data == "back_to_main":
#         # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É
#         bot.delete_message(call.message.chat.id, call.message.message_id)
#         # send_welcome(call.message)

# # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
# def extend_subscription(call):
#     user_id = call.message.chat.id
#     cursor.execute('SELECT subscription_type, subscription_start_date FROM users WHERE user_id = ?', (user_id,))
#     user_info = cursor.fetchone()

#     if user_info:
#         current_subscription_type, subscription_start_date = user_info
#         start_date = datetime.strptime(subscription_start_date, '%Y-%m-%d %H:%M:%S')

#         # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
#         days_passed = (datetime.now() - start_date).days
#         if "1 –º–µ—Å—è—Ü" in current_subscription_type:
#             total_days = 30
#         elif "6 –º–µ—Å—è—Ü–µ–≤" in current_subscription_type:
#             total_days = 180
#         elif "12 –º–µ—Å—è—Ü–µ–≤" in current_subscription_type:
#             total_days = 365
#         else:
#             total_days = 0
        
#         # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
#         days_remaining = total_days - days_passed

#         # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø–æ–∫—É–ø–∫–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
#         markup = types.InlineKeyboardMarkup()

#         # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#         one_month = types.InlineKeyboardButton("üóìÔ∏è 1 –º–µ—Å—è—Ü", callback_data="1 –º–µ—Å—è—Ü")
#         six_months = types.InlineKeyboardButton("üóìÔ∏è 6 –º–µ—Å—è—Ü–µ–≤", callback_data="6 –º–µ—Å—è—Ü–µ–≤")
#         twelve_months = types.InlineKeyboardButton("üóìÔ∏è 12 –º–µ—Å—è—Ü–µ–≤", callback_data="12 –º–µ—Å—è—Ü–µ–≤")

#         markup.add(one_month, six_months, twelve_months)
#         bot.send_message(call.message.chat.id, f"‚è≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω–µ–π –ø–æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=markup)

# @bot.callback_query_handler(func=lambda call: call.data in ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "12 –º–µ—Å—è—Ü–µ–≤"])
# def handle_extension_choice(call):
#     user_id = call.message.chat.id
#     chosen_subscription = call.data

#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
#     cursor.execute('SELECT subscription_type, subscription_start_date FROM users WHERE user_id = ?', (user_id,))
#     user_info = cursor.fetchone()

#     if user_info:
#         current_subscription_type, subscription_start_date = user_info
#         start_date = datetime.strptime(subscription_start_date, '%Y-%m-%d %H:%M:%S')

#         # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
#         days_passed = (datetime.now() - start_date).days
#         if "1 –º–µ—Å—è—Ü" in current_subscription_type:
#             total_days = 30
#         elif "6 –º–µ—Å—è—Ü–µ–≤" in current_subscription_type:
#             total_days = 180
#         elif "12 –º–µ—Å—è—Ü–µ–≤" in current_subscription_type:
#             total_days = 365

#         days_remaining = total_days - days_passed

#         # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
#         if chosen_subscription == "1 –º–µ—Å—è—Ü":
#             extra_days = 30
#         elif chosen_subscription == "6 –º–µ—Å—è—Ü–µ–≤":
#             extra_days = 180
#         elif chosen_subscription == "12 –º–µ—Å—è—Ü–µ–≤":
#             extra_days = 365
#         else:
#             extra_days = 0

#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ–±–∞–≤–ª—è—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
#         new_end_date = datetime.now() + timedelta(days=days_remaining + extra_days)
#         new_start_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

#         # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#         cursor.execute('UPDATE users SET subscription_start_date = ?, subscription_type = ? WHERE user_id = ?', 
#                        (new_start_date, chosen_subscription, user_id))
#         conn.commit()

#         bot.send_message(user_id, f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ! üéâ\n üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {extra_days} –¥–Ω–µ–π.")


# # –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
# # –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
# def cancel_subscription(call):
#     user_id = call.message.chat.id
#     cursor.execute('SELECT subscription_start_date FROM users WHERE user_id = ?', (user_id,))
#     subscription_start_date = cursor.fetchone()[0]
    
#     today = datetime.now()
#     start_date = datetime.strptime(subscription_start_date, '%Y-%m-%d %H:%M:%S')
#     days_passed = (today - start_date).days

#     if days_passed > 14:
#         # –û—Ç–∫–∞–∑ –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ
#         bot.send_message(user_id, "‚ùå –û—Ç–∫–∞–∑ –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
#     else:
#         # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
#         question = bot.send_message(user_id, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.")
#         bot.register_next_step_handler(question, process_refund_reason, question.message_id)

# # –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
# def process_refund_reason(message, question_message_id):
#     user_id = message.chat.id
#     reason = message.text

#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã
#     bot.delete_message(user_id, message.message_id)
#     bot.delete_message(user_id, question_message_id)

#     question = bot.send_message(user_id, "üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
#     bot.register_next_step_handler(question, lambda msg: process_refund_details(msg, reason, question.message_id))

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
# def process_refund_details(message, reason, question_message_id):
#     user_id = message.chat.id
#     card_details = message.text

#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
#     bot.delete_message(user_id, message.message_id)
#     bot.delete_message(user_id, question_message_id)

#     # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
#     markup = types.InlineKeyboardMarkup()
#     confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"confirm_cancel_{user_id}")
#     markup.add(confirm_button)

#     username = message.from_user.username if message.from_user.username else f"{message.from_user.first_name} {message.from_user.last_name}"


#     bot.send_message(
#         ADMIN_ID,
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_details}",
#         reply_markup=markup
#     )

#     bot.send_message(user_id, "üì® –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. ‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º
# @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_cancel_'))
# def handle_cancel_confirmation(call):
#     user_id = call.data.split('_')[-1]

#     # –û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     cursor.execute('UPDATE users SET subscription_status = ?, subscription_start_date = ? WHERE user_id = ?',
#                    ('–û—Ç–º–µ–Ω–µ–Ω–∞', None, user_id))
#     conn.commit()

#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
#     bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∞.")
#     bot.send_message(ADMIN_ID, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

#     # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Å—Ç–∞–µ—Ç—Å—è, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞
# @bot.message_handler(content_types=['photo'])
# def handle_receipt(message):
#     user_id = message.chat.id
    
#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     cursor.execute('SELECT first_name, last_name, subscription_type FROM users WHERE user_id = ?', (user_id,))
#     user_info = cursor.fetchone()

#     if user_info:
#         first_name, last_name, subscription_type = user_info
#     else:
#         first_name, last_name, subscription_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
#     # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —á–µ–∫ –∞–¥–º–∏–Ω—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     bot.send_message(user_id, "üì© –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
#     bot.forward_message(ADMIN_ID, user_id, message.message_id)
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
#     markup = types.InlineKeyboardMarkup()
#     confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}")
#     decline_button = types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"decline_{user_id}")
#     markup.add(confirm_button, decline_button)
    
#     bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} ({user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {subscription_type}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.", reply_markup=markup)

#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#     bot.delete_message(user_id, message.message_id)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∏–¥–µ—Ç –æ—Ç–≤–µ—Ç, –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
#     if message.reply_to_message is not None:
#         bot.delete_message(user_id, message.reply_to_message.message_id)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º
# @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_') or call.data.startswith('decline_'))
# def handle_admin_action(call):
#     user_id = call.data.split('_')[-1]

#     invite_link = create_one_time_invite_link()

#     if call.data.startswith('confirm_'):
#         # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
#         cursor.execute('UPDATE users SET subscription_status = ? WHERE user_id = ?', ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', user_id))
#         conn.commit()
        
#         # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ\n\nüîó –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {invite_link}\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üí´")
#         bot.send_message(ADMIN_ID, f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    
#     elif call.data.startswith('decline_'):
#         # –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
#         bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
#         bot.register_next_step_handler(call.message, lambda msg: handle_decline_reason(msg, user_id))

# def handle_decline_reason(message, user_id):
#     reason = message.text
#     bot.send_message(user_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: {reason}.")
#     bot.send_message(ADMIN_ID, f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}.")

# db_path = "C:\\Users\\anm24\\Desktop\\test\\subscriptions.db"    

# def get_subscribed_users(db_path):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
#     connection = sqlite3.connect(db_path)
#     cursor = connection.cursor()
    
#     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users –µ—Å—Ç—å –ø–æ–ª–µ subscription_status (1 - –ø–æ–¥–ø–∏—Å–∞–Ω, 0 - –Ω–µ—Ç)
#     cursor.execute("SELECT user_id FROM users WHERE subscription_status = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'")
#     users = cursor.fetchall()
    
#     connection.close()
    
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id
#     return [user[0] for user in users]

# def send_message_to_all_subscribers(message, db_path):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
#     users = get_subscribed_users(db_path)
    
#     for user_id in users:
#         try:
#             bot.send_message(user_id, message)
#         except Exception as e:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
# @bot.message_handler(func=lambda message: message.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
# def handle_send_to_all(message):
#     if str(message.chat.id) == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
#         markup = types.InlineKeyboardMarkup()
#         button1 = types.InlineKeyboardButton("–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä", callback_data="live")
#         button2 = types.InlineKeyboardButton("–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞", callback_data="important")
#         button3 = types.InlineKeyboardButton("–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="offer")
#         markup.add(button1, button2, button3)
        
#         bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
# @bot.callback_query_handler(func=lambda call: call.data in ["live", "important", "offer"])
# def handle_broadcast_type(call):
#     broadcast_type = call.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏

#     if broadcast_type == "live":
#         bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞:")
#         bot.register_next_step_handler(call.message, lambda msg: ask_for_live_date(msg))

#     elif broadcast_type == "important":
#         bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
#         bot.register_next_step_handler(call.message, lambda msg: process_admin_message(msg, "important"))

#     elif broadcast_type == "offer":
#         bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
#         bot.register_next_step_handler(call.message, lambda msg: process_admin_message(msg, "offer"))

# def ask_for_live_date(message):
#     live_theme = message.text
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞:")
#     bot.register_next_step_handler(message, lambda msg: ask_for_live_time(msg, live_theme))

# def ask_for_live_time(message, live_theme):
#     live_date = message.text
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞:")
#     bot.register_next_step_handler(message, lambda msg: process_live_broadcast(msg, live_theme, live_date))

# def process_live_broadcast(message, live_theme, live_date):
#     live_time = message.text
#     db_path = "C:\\Users\\anm24\\Desktop\\test\\subscriptions.db"  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

#     # –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
#     live_broadcast_message = f"""
# üì¢ –ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä! 

# üéô **–¢–µ–º–∞**: {live_theme}
# üìÖ **–î–∞—Ç–∞**: {live_date}
# üïí **–í—Ä–µ–º—è**: {live_time}

# –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ —ç—Ñ–∏—Ä—É –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!
#     """

#     send_message_to_all_subscribers(live_broadcast_message, db_path)
#     bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# def process_admin_message(message, broadcast_type):
#     admin_message = message.text
#     db_path = "C:\\Users\\anm24\\Desktop\\test\\subscriptions.db"  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

#     # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#     if broadcast_type == "important":
#         message_to_send = f"üîî **–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: {admin_message}"
#     elif broadcast_type == "offer":
#         message_to_send = f"üí° **–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ**: {admin_message}"

#     send_message_to_all_subscribers(message_to_send, db_path)
#     bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¢–∏–ø: {broadcast_type}).")

# def send_message_to_all_subscribers(message, db_path):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
#     users = get_subscribed_users(db_path)
    
#     for user_id in users:
#         try:
#             bot.send_message(user_id, message, parse_mode='Markdown')
#         except Exception as e:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")





# db_path = "C:\\Users\\anm24\\Desktop\\test\\subscriptions.db"    

# def get_unsubscribed_users(db_path):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
#     connection = sqlite3.connect(db_path)
#     cursor = connection.cursor()
    
#     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users –µ—Å—Ç—å –ø–æ–ª–µ subscription_status ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' –∏–ª–∏ '–û—Ç–º–µ–Ω–µ–Ω–∞')
#     cursor.execute("SELECT user_id FROM users WHERE subscription_status = '–û—Ç–º–µ–Ω–µ–Ω–∞'")
#     users = cursor.fetchall()
    
#     connection.close()
    
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id
#     return [user[0] for user in users]

# def send_message_to_unsubscribed_users(message, db_path):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
#     users = get_unsubscribed_users(db_path)
    
#     for user_id in users:
#         try:
#             bot.send_message(user_id, message)
#         except Exception as e:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
# @bot.message_handler(func=lambda message: message.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–º")
# def handle_send_to_unsubscribed(message):
#     if str(message.chat.id) == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
#         markup = types.InlineKeyboardMarkup()
#         button1 = types.InlineKeyboardButton("–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä", callback_data="live_unsub")
#         button2 = types.InlineKeyboardButton("–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞", callback_data="important_unsub")
#         button3 = types.InlineKeyboardButton("–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="offer_unsub")
#         markup.add(button1, button2, button3)
        
#         bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:", reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
# @bot.callback_query_handler(func=lambda call: call.data in ["live_unsub", "important_unsub", "offer_unsub"])
# def handle_unsub_broadcast_type(call):
#     broadcast_type = call.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏

#     if broadcast_type == "live_unsub":
#         bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:")
#         bot.register_next_step_handler(call.message, lambda msg: ask_for_live_date_unsub(msg))

#     elif broadcast_type == "important_unsub":
#         bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:")
#         bot.register_next_step_handler(call.message, lambda msg: process_unsub_message(msg, "important_unsub"))

#     elif broadcast_type == "offer_unsub":
#         bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:")
#         bot.register_next_step_handler(call.message, lambda msg: process_unsub_message(msg, "offer_unsub"))

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
# def ask_for_live_date_unsub(message):
#     live_theme = message.text
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞:")
#     bot.register_next_step_handler(message, lambda msg: ask_for_live_time_unsub(msg, live_theme))

# def ask_for_live_time_unsub(message, live_theme):
#     live_date = message.text
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞:")
#     bot.register_next_step_handler(message, lambda msg: process_live_broadcast_unsub(msg, live_theme, live_date))

# def process_live_broadcast_unsub(message, live_theme, live_date):
#     live_time = message.text
#     db_path = "C:\\Users\\anm24\\Desktop\\test\\subscriptions.db"  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

#     # –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
#     live_broadcast_message = f"""
# üì¢ –ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä! 

# üéô **–¢–µ–º–∞**: {live_theme}
# üìÖ **–î–∞—Ç–∞**: {live_date}
# üïí **–í—Ä–µ–º—è**: {live_time}

# –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ —ç—Ñ–∏—Ä—É –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!
#     """

#     send_message_to_unsubscribed_users(live_broadcast_message, db_path)
#     bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")

# def process_unsub_message(message, broadcast_type):
#     admin_message = message.text
#     db_path = "C:\\Users\\anm24\\Desktop\\test\\subscriptions.db"  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

#     # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#     if broadcast_type == "important_unsub":
#         message_to_send = f"üîî **–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è** (–û—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞): {admin_message}"
#     elif broadcast_type == "offer_unsub":
#         message_to_send = f"üí° **–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ** (–û—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞): {admin_message}"

#     send_message_to_unsubscribed_users(message_to_send, db_path)
#     bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–¢–∏–ø: {broadcast_type}).")

# def send_message_to_unsubscribed_users(message, db_path):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
#     users = get_unsubscribed_users(db_path)
    
#     for user_id in users:
#         try:
#             bot.send_message(user_id, message, parse_mode='Markdown')
#         except Exception as e:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")










# def check_subscription_expiry():
#     while True:
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
#         cursor.execute('SELECT user_id, subscription_type, subscription_start_date FROM users WHERE subscription_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"')
#         users = cursor.fetchall()

#         if users:
#             for user in users:
#                 user_id, subscription_type, subscription_start_date = user
#                 start_date = datetime.strptime(subscription_start_date, '%Y-%m-%d %H:%M:%S')

#                 # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#                 days_passed = (datetime.now() - start_date).days
#                 hours_passed = (datetime.now() - start_date).seconds // 3600

#                 if "1 –º–µ—Å—è—Ü" in subscription_type:
#                     total_days = 30
#                 elif "6 –º–µ—Å—è—Ü–µ–≤" in subscription_type:
#                     total_days = 180
#                 elif "12 –º–µ—Å—è—Ü–µ–≤" in subscription_type:
#                     total_days = 365
#                 else:
#                     total_days = 0

#                 days_remaining = total_days - days_passed
#                 hours_remaining = (24 - hours_passed) if days_remaining == 0 else None

#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è, 1 –¥–µ–Ω—å –∏ –∑–∞ 1 —á–∞—Å –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#                 if days_remaining == 3:
#                     send_expiry_warning(user_id, days_remaining)
#                 elif days_remaining == 1:
#                     send_expiry_warning(user_id, days_remaining)
#                 elif days_remaining == 0 and hours_remaining == 1:
#                     send_expiry_warning(user_id, hours_remaining, time_type="hour")

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å
#         time.sleep(3600)

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# def send_expiry_warning(user_id, time_remaining, time_type="days"):
#     if time_type == "days":
#         bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_remaining} –¥–Ω–µ–π! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=create_extend_button())
#     elif time_type == "hour":
#         bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_remaining} —á–∞—Å! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=create_extend_button())

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
# def create_extend_button():
#     markup = types.InlineKeyboardMarkup()
#     extend_button = types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
#     markup.add(extend_button)
#     return markup

# # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
# def start_subscription_checker():
#     checker_thread = threading.Thread(target=check_subscription_expiry)
#     checker_thread.daemon = True
#     checker_thread.start()

# def create_one_time_invite_link():
#     try:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ createChatInviteLink –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
#         invite_link = bot.create_chat_invite_link(
#             chat_id=CHANNEL_ID,
#             expire_date=None,         # –°—Å—ã–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
#             member_limit=1            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
#         )
#         return invite_link.invite_link
#     except Exception as e:
#         bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {e}")
#         return None

# @bot.message_handler(commands=['get_channel_id'])
# def get_channel_id(message):
#     if str(message.chat.id) == ADMIN_ID:
#         # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª –≤–º–µ—Å—Ç–æ username
#         invite_link = 'https://t.me/+3mVzZ157h49kY2Zi'  # –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
#         try:
#             chat_info = bot.get_chat(invite_link)
#             bot.send_message(message.chat.id, f"ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞: {chat_info.id}")
#         except Exception as e:
#             bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
#     else:
#         bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# if __name__ == "__main__":
#     start_subscription_checker()  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
#     bot.polling()